// Autor: Cheuk Kelly Ng Pante
// Asignatura: Arquitectura de Computadores
// Practica SIMDE - Maquina Superescalar
// #################################################################################
// Codigo en C++ del Algoritmo Bubble Sort:
// for(int i = 0; i < vector.size(); i++) { recorre el vector
//   for(int j = 0; j < (vector.size() - i); j++) { coge cada elemento del vector
//       if(arreglo[j] > arreglo[j+1]){
//         aux = arreglo[j];
//         arreglo[j] = arreglo[j + 1];
//         arreglo[j + 1] = aux;
//       }
//   }
//}

9
ADDI R8 R0 #0            // Vector en posicion 41, mejor poner cero y en los LW sumarle 41 y 42
LW R10 40(R8)             // Tam del vector 
LOOP: LW R3 41(R8)          // Cargo en R3 la posicion de memoria [41], Rd = MEM[40+0], R1 = 0 --> j
  LW R4 42(R8)             // Cargo en R4 la posicion de memoria [42], Rd = MEM[41+0], R1 = 0 --> j + 1
  SW R4 (R8)              // arreglo[j] = arreglo[j + 1]; SW Ro, Inm(Rd) --> MEM[Rd + Inm] = Ro --> En la pos R8 (40) guardo lo que hay en R4
  SW R3 1(R8)             // arreglo[j + 1] = arreglo[j]; SW Ro, Inm(Rd) --> MEM[Rd + Inm] = Ro --> En la pos R8 (41) guardo lo que hay en R3
NOSWAP: ADDI R8 R8 #1     // Incrementa una posicion de memoria + 1
  ADDI R1 R1 #1           // R1 = R1 + 1 --> i++
  BNE R1 R10 LOOP         // Si R1 != R2 salta a LOOP, i <= 16, si i == 16 sale fuera, termina